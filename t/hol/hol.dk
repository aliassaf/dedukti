htype: Type.
o: htype.
arrow: htype -> htype -> htype.


hterm: htype -> Type.
Lam: a: htype -> b: htype -> (hterm a -> hterm b) -> hterm (arrow a b).
App: a: htype -> b: htype -> hterm (arrow a b) -> hterm a -> hterm b.
Imp: hterm (arrow o (arrow o o)).
Forall: a: htype -> hterm (arrow (arrow a o) o).
Eq: a: htype -> hterm (arrow a (arrow a o)).


;; Facilities

himp: hterm o -> hterm o -> hterm o.
[a: hterm o,
 b: hterm o] App o o (App o (arrow o o) Imp a) b --> himp a b.


hforall: a: htype -> hterm (arrow a o) -> hterm o.
[a: htype,
 P: hterm (arrow a o)] App (arrow a o) o (Forall a) P --> hforall a P.


heq: a: htype -> hterm a -> hterm a -> hterm o.
[a: htype,
 x: hterm a,
 y: hterm a] App a o (App a (arrow a o) (Eq a) x) y --> heq a x y.


hequiv: hterm o -> hterm o -> hterm o.
[] heq o --> hequiv.


;; eps

eps: hterm o -> Type.

[a: hterm o,
 b: hterm o] eps (himp a b) --> eps a -> eps b.

[a: htype,
 f: hterm a -> hterm o] eps (hforall a (Lam a o f)) --> b: hterm a -> eps (f b).

[a: htype,
 x: hterm a,
 y: hterm a] eps (heq a x y) --> P: hterm (arrow a o) -> eps (App a o P x) -> eps (App a o P y).


;; Extensionality

fun_ext: a: htype -> b: htype -> f: hterm (arrow a b) -> g: hterm (arrow a b) ->
    (x: hterm a -> eps (heq b (App a b f x) (App a b g x))) -> eps (heq (arrow a b) f g).

prop_ext: p: hterm o -> q: hterm o -> eps (himp p q) -> eps (himp q p) -> eps (hequiv p q).


;; Beta rule

beta: a: htype -> b: htype -> f: (hterm a -> hterm b) -> u: hterm a -> eps (heq b (App a b (Lam a b f) u) (f u)).


;; Rules

refl: a: htype -> x: hterm a -> eps (heq a x x).
[a: htype,
 x: hterm a] refl a x --> P: hterm (arrow a o) => h: eps (App a o P x) => h.


;; sym: a: htype -> x: hterm a -> y: hterm a -> eps (heq a x y) -> eps (heq a y x).
;; [a: htype,
;;  x: hterm a,
;;  y: hterm a,
;;  Hxy: eps (heq a x y)] ; = P: hterm (arrow a o) -> eps (App a o P x) -> eps (App a o P y)
;; sym a x y Hxy --> P: hterm (arrow a o) => Hy: eps (App a o P y)
; eps (heq a y x) = P: hterm (arrow a o) -> eps (App a o P y) -> eps (App a o P x)


trans: a: htype -> s: hterm a -> t: hterm a -> u: hterm a -> eps (heq a s t) -> eps (heq a t u) -> eps (heq a s u).
[a: htype,
 s: hterm a,
 t: hterm a,
 u: hterm a,
 Hst: P: hterm (arrow a o) -> eps (App a o P s) -> eps (App a o P t),
 Htu: P: hterm (arrow a o) -> eps (App a o P t) -> eps (App a o P u)]
trans a s t u Hst Htu --> P: hterm (arrow a o) => Hs: eps (App a o P s) => Htu P (Hst P Hs).


mk_comb: a: htype -> b: htype -> s: hterm (arrow a b) -> t: hterm (arrow a b) -> u: hterm a -> v: hterm a ->
  eps (heq (arrow a b) s t) -> eps (heq a u v) -> eps (heq b (App a b s u) (App a b t v)).
;; [a: htype,
;;  b: htype,
;;  s: hterm (arrow a b),
;;  t: hterm (arrow a b),
;;  u: hterm a,
;;  v: hterm a,
;;  Hst: eps (heq (arrow a b) s t), ; = P: hterm (arrow (arrow a b) o) -> Hs: eps (App (arrow a b) o P s) -> eps (App (arrow a b) o P y)
;;  Huv: eps (heq a u v)] ; = P: hterm (arrow a o) -> Hu: eps (App a o P u) -> eps (App a o P v)
;; mk_comb a b s t u v Hst Huv --> P: hterm (arrow b o) => Hsu: eps (App b o P (App a b s u)) =>
;;   ; eps (App b o P (App a b t v))

abs: a: htype -> b: htype -> s: hterm b -> t: hterm b ->
  eps (heq b s t) -> eps (heq (arrow a b) (Lam a b (x: hterm a => s)) (Lam a b (x: hterm a => t))).
;; [a: htype,
;;  b: htype,
;;  s: hterm b,
;;  t: hterm b,
;;  Hst: eps (heq b s t)] ; P: hterm (arrow b o) -> eps (App b o P s) -> eps (App b o P t)
;; abs a b s t Hst --> fun_ext _ _ _ _ (x: hterm a => trans () ())
; eps (heq b (App a b (Lam a b (x: hterm a => s)) x) (App a b (Lam a b (x: hterm a => t)) x))
; = 

; eps (heq (arrow a b) (Lam a b (x: hterm a => s)) (Lam a b (x: hterm a => t)))
; = P: hterm (arrow (arrow a b) o) -> eps (App (arrow a b) o P (Lam a b (x: hterm a => s)))
;                                  -> eps (App (arrow a b) o P (Lam a b (x: hterm a => t)))

;; fun_ext: a: htype -> b: htype -> f: hterm (arrow a b) -> g: hterm (arrow a b) ->
;;     (x: hterm a -> eps (heq b (App a b f x) (App a b g x))) -> eps (heq (arrow a b) f g).

; beta: a: htype -> b: htype -> f: (hterm a -> hterm b) -> u: hterm a -> eps (heq b (App a b (Lam a b f) u) (f u)).



;; App: hterm (arrow a b) -> hterm a -> hterm b
;; Lam: (hterm a -> hterm b) -> hterm (arrow a b)

;; [a: htype,
;;  x: hterm a,
;;  y: hterm a] eps (heq a x y) --> P: hterm (arrow a o) -> eps (App a o P x) -> eps (App a o P y).
